// TODO: main class in manifest
// TODO: include CSS from tools/soyc-vis

sourceSets {
  main {
    java {
      srcDir 'super'
      exclude 'com/google/gwt/dev/jjs/intrinsic/**'
    }
  }
}

// Filter About.properties with version info
import org.apache.tools.ant.filters.ReplaceTokens
processResources {
  def gwt_version = version.endsWith('-SNAPSHOT') ? '0.0.0' : version
  def gwt_gitrev = 'git rev-parse --short HEAD'.execute().text.trim()

  inputs.property('version', gwt_version)
  inputs.property('gitrev', gwt_gitrev)

  def filterPattern = 'com/google/gwt/dev/About.properties'
  from(sourceSets.main.resources.srcDirs) {
    include filterPattern
    filter(ReplaceTokens, tokens: [
        GWT_VERSION: gwt_version,
        GWT_GITREV: gwt_gitrev
      ])
  }
  from(sourceSets.main.resources.srcDirs) {
    include '**/*.properties'
    exclude filterPattern
  }
}

dependencies {
  compile localJar('jsr305/jsr305.jar')
  compile localJar('guava/guava-16.0.1/guava-16.0.1-rebased.jar')
  compile localJar('json/android-sdk-19.1/json-android.jar')
  compile localJar('protobuf/protobuf-2.5.0/protobuf-java-rebased-2.5.0.jar')
  compile localJar('eclipse/org.eclipse.jdt.core_3.8.3.v20130121-145325.jar')
  compile localJar('eclipse/jdtCompilerAdapter-3.8.3.v20130121-145325.jar')
  compile localJar('jscomp/20131118/compiler-rebased.jar')
  compile localJar('jscomp/20131118/sourcemap-rebased.jar')
  compile localJar('jetty/jetty-8.1.12.v20130726/jetty-8.1.12.v20130726.jar')
  compile localJar('jetty/jetty-8.1.12.v20130726/servlet-api-3.0-NoMetaInf.jar')
  compile 'ant:ant:1.6.5@jar'
//  compile 'javax.servlet:servlet-api:3.0@jar'
  compile localJar('icu4j/50.1.1/icu4j.jar')
  compile localJar('apache/james/apache-mime4j-0.6.jar')
  compile localJar('apache/commons/commons-codec-1.8.jar')
  compile localJar('apache/commons/commons-io-2.4.jar')
  compile localJar('apache/commons/commons-lang3-3.1.jar')
  compile localJar('apache/commons/commons-logging-1.1.3.jar')
  compile localJar('tomcat/commons-el-1.0.jar')
  compile localJar('tomcat/jasper-compiler-1.0.jar')
  compile localJar('tomcat/jasper-runtime-1.0.jar')
  compile localJar('tomcat/jsp-api-2.0.jar')
  compile localJar('apache/http/httpclient-4.3.1.jar')
  compile localJar('apache/http/httpcore-4.3.jar')
  compile localJar('apache/http/httpmime-4.3.1.jar')
  compile localJar('cssparser/cssparser-0.9.11.jar')
  compile localJar('htmlunit/htmlunit-2.13/htmlunit-2.13.jar')
  compile localJar('htmlunit/htmlunit-2.13/htmlunit-core-js-2.13.jar')
  compile localJar('nekohtml/nekohtml-1.9.19.jar')
  compile localJar('cup/java-cup-11a.jar')
  compile localJar('xalan/xalan-2.7.1-nocup.jar')
  compile localJar('xerces/xerces-2_11_0/serializer-2.7.1.jar')
  compile localJar('xerces/xerces-2_11_0/xercesImpl-2.11.0.jar')
  compile localJar('xerces/xerces-2_11_0/xml-apis-1.4.01.jar')
  compile localJar('w3c/sac/sac-1.3.jar')
  compile localJar('apache/tapestry-util-text-4.0.2.jar')

  testCompile localJar('apache/commons/commons-collections-3.2.1.jar')

  // Pull in gwt-user for .gwt.xml files
  testRuntime(project(':user')) { transitive = false }
  // CompilerTest compiles the hello sample.
  testRuntime files(project(':hello').sourceSets.main.java.srcDirs)
  testRuntime files(project(':hello').sourceSets.main.resources.srcDirs)
}

test {
  includes = [ 'com/google/**/*Test.class' ]
  // BrowserManagerTest is brought in from user and is not instantiable.
  // IncrementalBuilderTest needs a special setup.
  // TODO(stalcup): Add the correct setup for IncrementalBuilderTest and reenable.
  excludes = [ '**/BrowserManagerTest.class', '**/IncrementalBuilderTest.class' ]

  // hack for ClassPathEntryTest and a few other tests: srcDirs MUST come first
  classpath = files(sourceSets.test.java.srcDirs) + sourceSets.test.runtimeClasspath
  // mimics Ant's junit task forkMode=perTest default, needed for SpeedTracerLogger tests
  forkEvery = 1

  enableAssertions = true
  systemProperty 'gwt.args', '-ea'
}

idea {
  module {
    excludeDirs += file("super/com/google/gwt/dev/jjs/intrinsic")
  }
}

// We need to remove the testRuntime dependencies or it'll create circular dependencies in Eclipse
configurations {
  noEclipseClasspath
}
dependencies {
  noEclipseClasspath configurations.testRuntime.dependencies
}
configurations.testRuntime.extendsFrom(configurations.noEclipseClasspath)
eclipse {
  classpath {
    minusConfigurations += configurations.noEclipseClasspath
    noExportConfigurations += configurations.all // export nothing
    file {
      whenMerged { classpath ->
        classpath.entries.find { it.kind == 'src' && it.dir.name == 'super' }.excludes += 'com/google/gwt/dev/jjs/intrinsic/'
        classpath.entries.each { entry ->
          if (entry.kind == 'src') {
            fileTree(entry.dir).visit { file ->
              if (file.name == 'super' || file.name == 'public') {
                entry.excludes += file.relativePath.pathString
              }
            }
          }
        }
      }
    }
  }
}

task protoc(type: Exec) {
  executable 'protoc'
  args '--java_out=core/src'
  args "$projectDir/src/com/google/gwt/dev/shell/remoteui/remotemessage.proto"

  // TODO: Rebase the java code to match the rebased protobuf library
}

