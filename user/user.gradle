sourceSets {
  test {
    java {
      exclude 'com/google/gwt/langtest/**'
      exclude '**/super/**'
    }
    resources {
      // TODO: make configurable between 'dollar' and 'bar', or use distinct tasks
      srcDir 'test_i18n_dollar'
    }
  }
}

dependencies {
    compile localJar('jsr305/jsr305.jar')
    compile localJar('jetty/jetty-8.1.12.v20130726/servlet-api-3.0-NoMetaInf.jar')
    compile localJar('junit/junit-4.8.2.jar')
    compile localJar('selenium/selenium-java-client-driver.jar')
    compile localJar('w3c/sac/sac-1.3.jar')
    compile localJar('w3c/flute/flute-1.3-gg2.jar')
    compile localJar('json/android-sdk-19.1/json-android.jar')
    compile localJar('javax/validation/validation-api-1.0.0.GA.jar')
    compile localJar('javax/validation/validation-api-1.0.0.GA-sources.jar')
    compile localJar('hibernate/validator/hibernate-validator-4.1.0.Final.jar')
    compile localJar('hibernate/validator/hibernate-validator-4.1.0.Final-sources.jar')
    compile localJar('streamhtmlparser/streamhtmlparser-jsilver-r10/streamhtmlparser-jsilver-r10-1.5-rebased.jar')
    compile project(':dev')

    testCompile project(':dev').sourceSets.test.runtimeClasspath
    testRuntime localJar('apache/log4j/log4j-1.2.16.jar')
    testRuntime localJar('cglib/cglib-2.2.jar')
    testRuntime localJar('objenesis/objenesis-1.2.jar')
    testCompile localJar('easymock/easymock-3.0.jar')
    testRuntime localJar('objectweb/asm-3.1.jar')
    testRuntime localJar('slf4j/slf4j-api/slf4j-api-1.6.1.jar')
    testRuntime localJar('slf4j/slf4j-log4j12/slf4j-log4j12-1.6.1.jar')
    // TCK jars
    testRuntime localJar('hibernate/validator/tck/jsr303-tck-1.0.3.GA-sources.jar')
    testCompile localJar('hibernate/validator/tck/jsr303-tck-1.0.3.GA.jar')
    testRuntime localJar('jboss/test-audit/jboss-test-audit-api-1.0.0-sources.jar')
    testRuntime localJar('jboss/test-audit/jboss-test-audit-api-1.0.0.jar')
    testRuntime localJar('jboss/test-harness/jboss-test-harness-1.0.0-sources.jar')
    testCompile localJar('jboss/test-harness/jboss-test-harness-1.0.0.jar')
    testRuntime localJar('jboss/test-harness/jboss-test-harness-api-1.0.0-sources.jar')
    testRuntime localJar('jboss/test-harness/jboss-test-harness-api-1.0.0.jar')
    testRuntime localJar('testng/testng-5.14.1-sources.jar')
    testRuntime localJar('testng/testng-5.14.1-nojunit.jar')
}

compileTestJava {
  options.with {
    compilerArgs += [ '-processor', 'com.google.web.bindery.requestfactory.apt.RfValidator' ]
  }
}

test {
  enableAssertions = true
  systemProperty 'gwt.args', '-ea -standardsMode'

  // Some tests depend on the locale
  // TODO: how about Windows?
  environment 'LC_ALL', 'en_US.utf8'
  environment 'TZ', 'America/Los_Angeles'

  // Fork for every test suite, or we'll face memory errors
  forkEvery = 1
}

idea {
  module {
    FileTree tree = fileTree(dir: 'src')
    tree.visit { f ->
      if (javax.lang.model.SourceVersion.isKeyword(f.name)) {
        excludeDirs += file('src/' + f.relativePath)
      }
    }
  }
}
eclipse {
  classpath {
    file {
      whenMerged { classpath ->
        classpath.entries.each { entry ->
          if (entry instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder) {
            fileTree(entry.dir).visit { file ->
              if (javax.lang.model.SourceVersion.isKeyword(file.name)) {
                entry.excludes += file.relativePath.pathString
              }
            }
          }
        }
      }
    }
  }
}
